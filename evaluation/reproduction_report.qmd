---
title: "Summary report"
subtitle: "For computational reproducibility assessment of Anagnostou et al. 2022"
format:
  html:
    page-layout: full
echo: False
bibliography: ../quarto_site/references.bib
---

## Study

> Anagnostou, A. Groen, D. Taylor, S. Suleimenova, D. Abubakar, N. Saha, A. Mintram, K. Ghorbani, M. Daroge, H. Islam, T. Xue, Y. Okine, E. Anokye, N. **FACS-CHARM: A Hybrid Agent-Based and Discrete-Event Simulation Approach for Covid-19 Management at Regional Level**. 2022 Winter Simulation Conference (WSC), Singapore, pp. 1223-1234. (2022). <https://doi.org/10.1109/WSC57314.2022.10015462>.

This paper includes two models - we have focussed just on the dynamiC Hospital wARd Management (CHARM) model. CHARM is a discrete-event simulation modelling intensive care units (ICU) in the COVID-19 pandemic (as well as subsequent stays in a recovery bed). It includes three types of admission to the ICU (emergency, elective or COVID-19). COVID-19 patients are kept seperate, and if they run out of capacity due to a surge in COVID-19 admissions, additional capacity can be pooled from the elective and emergency capacity.

## Computational reproducibility

Successfully reproduced **1 out of 1 (100%)** of items from the scope in **2h 11m (5.5%)**.

Required troubleshooting:

* **Writing code to reproduce the figure**

::: {.panel-tabset}

## Figure 3

Cannot display original figure as do not have permissions for reuse, but can view at @anagnostou_facs-charm_2022

Reproduction:

![](../reproduction/output/fig3.png){.lightbox}

:::

## Evaluation against guidelines

```{python}
import pandas as pd
import plotly.express as px

# Create dataframe of results
col = ['fully', 'partially', 'not', 'na']
eval_dict = {
  'STARS (essential)': [7, 0, 1, 0],
  'STARS (optional)': [1, 1, 3, 0],
  'Badges (criteria)': [10, 0, 2, 0],
  'Badges (badges)': [5, 0, 7, 0],
  'STRESS-DES': [14, 2, 5, 3],
  'ISPOR-SDM': [8, 3, 4, 3]
}
eval_wide = pd.DataFrame(eval_dict, index=col).T
eval = (eval_wide
        .melt(ignore_index=False)
        .reset_index()
        .rename(columns={'index': 'guideline',
                         'variable': 'result',
                         'value': 'count'}))

# Add percentages
eval['total'] = eval['count'].groupby(eval['guideline']).transform('sum')
eval['percent'] = eval['count'] / eval['total']
eval['percentage'] = round(eval['percent']*100, 1).astype(str) + '%'

# Create stacked bar visualisation
fig = px.bar(
  eval,
  x='percent',
  y='guideline',
  color='result',
  color_discrete_map={'fully': '#06a94d',
                      'partially': '#ffd68c',
                      'not': '#ff9999',
                      'na': '#d1dcea'},
  orientation='h',
  hover_data={
    'count': True,
    'percent': False,
    'percentage': True,
    'guideline': False,
    'result': False})
  
# Amend x axis label and ticks
fig.update_layout(xaxis = dict(
  range=[0,1],
  tickmode='array',
  tickvals=[0, 0.2, 0.4, 0.6, 0.8, 1],
  ticktext=['0%', '20%', '40%', '60%', '80%', '100%'],
  title=''))

# Amend y axis label and order, and add space between ticks and plot
fig.update_layout(yaxis=dict(
  autorange='reversed',
  title=''))
fig.update_yaxes(ticksuffix = '  ')

# Relabel legend
fig.update_layout(legend_title_text='Result')
newnames = {'fully': 'Fully met', 'partially': 'Partially met',
            'not': 'Not met', 'na': 'Not applicable'}
fig.for_each_trace(lambda t: t.update(name = newnames[t.name]))

# Show without toolbar
fig.show(config={'displayModeBar': False})
```

<sup>Context: The original study repository was evaluated against criteria from journal badges relating to how open and reproducible the model is and against guidance for sharing artefacts from the STARS framework. The original study article and supplementary materials (excluding code) were evaluated against reporting guidelines for DES models: STRESS-DES, and guidelines adapted from ISPOR-SDM.</sup>
